@{
    Layout = "~/Views/Shared/_PharmacyNavigation.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Orders Details</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <style>
        .card {
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
            transition: box-shadow 0.3s ease-in-out;
        }

            .card:hover {
                box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
            }

        .table th {
            background-color: #f8f9fa;
        }

        .badge {
            font-size: 0.875rem;
        }

        .order-items-transition {
            transition: all 0.3s ease-in-out;
        }

        #orderItemsContainer {
            margin-top: 20px;
            display: none;
        }

        .selected-order {
            background-color: #f8f9fa;
        }
    </style>
</head>
<body class="bg-light">
    <div class="container py-4">
        <div class="row mb-4">
            <div class="col">
                <h2 class="display-6 mb-3">Orders Details</h2>
                <div class="alert alert-info d-flex align-items-center">
                    <i class="fas fa-store-alt me-2"></i>
                    <div>
                        <strong>Logged in Pharmacy ID:</strong> <span id="currentPharmacyId">@ViewBag.PharmacyId</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Orders Card -->
        <div class="card mb-4">
            <div class="card-header bg-white">
                <h5 class="card-title mb-0">
                    <i class="fas fa-shopping-cart me-2"></i>Orders List
                </h5>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0" id="ordersDetailsTable">
                        <thead>
                            <tr>
                                <th class="ps-3">Order ID</th>
                                <th>Pharmacy ID</th>
                                <th>Order Date</th>
                                <th>Status</th>
                                <th>Total Amount</th>
                                <th class="text-end pe-3">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Data will be injected here by JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Order Items Card -->
        <div id="orderItemsContainer" class="card order-items-transition">
            <div class="card-header bg-white d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">
                    <i class="fas fa-list me-2"></i>Order Details - #<span id="selectedOrderId"></span>
                </h5>
                <button class="btn btn-sm btn-outline-secondary" onclick="hideOrderItems()">
                    <i class="fas fa-times me-1"></i>Close
                </button>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0" id="orderItemsTable">
                        <thead>
                            <tr>
                                <th class="ps-3">Item ID</th>
                                <th>Drug ID</th>
                                <th>Quantity</th>
                                <th>Unit Price</th>
                                <th class="pe-3">Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Data will be injected here by JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let lastSelectedRow = null;

        async function fetchOrdersDetails(pharmacyId) {
            try {
                const response = await fetch(`https://localhost:7210/api/order?pharmacyId=${pharmacyId}`);
                if (!response.ok) {
                    throw new Error('Error fetching orders');
                }

                const orders = await response.json();
                console.log("Orders received:", orders);

                if (!Array.isArray(orders)) {
                    throw new Error('Invalid order data format');
                }

                const ordersDetailsTableBody = document.querySelector('#ordersDetailsTable tbody');
                ordersDetailsTableBody.innerHTML = '';

                const filteredOrders = orders.filter(order => order.pharmacyId.toString() === pharmacyId.toString());

                filteredOrders.forEach(order => {
                    let totalAmount = order.items.reduce((sum, item) => sum + (item.quantity * item.unitPrice), 0);

                    let statusBadgeClass = 'bg-secondary';
                    switch(order.status.toLowerCase()) {
                        case 'pending': statusBadgeClass = 'bg-warning text-dark'; break;
                        case 'completed': statusBadgeClass = 'bg-success'; break;
                        case 'cancelled': statusBadgeClass = 'bg-danger'; break;
                        case 'processing': statusBadgeClass = 'bg-info'; break;
                    }

                    const orderRow = document.createElement('tr');
                    orderRow.setAttribute('data-order-id', order.id);
                    orderRow.innerHTML = `
                        <td class="ps-3">#${order.id}</td>
                        <td>${order.pharmacyId}</td>
                        <td>${new Date(order.orderDate).toLocaleDateString()}</td>
                        <td><span class="badge ${statusBadgeClass}">${order.status}</span></td>
                        <td>LKR.${totalAmount.toFixed(2)}</td>
                        <td class="text-end pe-3">
                            <button class="btn btn-sm btn-outline-primary view-items-btn">
                                <i class="fas fa-eye me-1"></i>View Items
                            </button>
                        </td>
                    `;

                    // Add click event listener to the View Items button
                    orderRow.querySelector('.view-items-btn').addEventListener('click', () => {
                        showOrderItems(order.id);
                        if (lastSelectedRow) {
                            lastSelectedRow.classList.remove('selected-order');
                        }
                        orderRow.classList.add('selected-order');
                        lastSelectedRow = orderRow;
                    });

                    ordersDetailsTableBody.appendChild(orderRow);
                });

                if (filteredOrders.length === 0) {
                    const noOrdersRow = document.createElement('tr');
                    noOrdersRow.innerHTML = `
                        <td colspan="6" class="text-center py-4">
                            <i class="fas fa-inbox fa-2x mb-3 text-muted"></i>
                            <p class="mb-0 text-muted">No orders found for this pharmacy</p>
                        </td>
                    `;
                    ordersDetailsTableBody.appendChild(noOrdersRow);
                }
            } catch (error) {
                console.error('Error:', error);
                showError('Failed to load orders: ' + error.message);
            }
        }

        async function showOrderItems(orderId) {
            try {
                const response = await fetch(`https://localhost:7210/api/order/${orderId}`);
                if (!response.ok) {
                    throw new Error('Error fetching order items');
                }

                const order = await response.json();
                const currentPharmacyId = document.getElementById('currentPharmacyId').textContent.trim();

                if (order.pharmacyId.toString() !== currentPharmacyId) {
                    throw new Error('Unauthorized access to order');
                }

                document.getElementById('selectedOrderId').textContent = orderId;
                const orderItemsTableBody = document.querySelector('#orderItemsTable tbody');
                orderItemsTableBody.innerHTML = '';

                order.items.forEach(item => {
                    const totalItemPrice = item.quantity * item.unitPrice;
                    const itemRow = document.createElement('tr');
                    itemRow.innerHTML = `
                        <td class="ps-3">#${item.id}</td>
                        <td>${item.drugId}</td>
                        <td>${item.quantity}</td>
                        <td>LKR.${item.unitPrice.toFixed(2)}</td>
                        <td class="pe-3">LKR.${totalItemPrice.toFixed(2)}</td>
                    `;
                    orderItemsTableBody.appendChild(itemRow);
                });

                document.getElementById('orderItemsContainer').style.display = 'block';

                // Scroll to the items container
                document.getElementById('orderItemsContainer').scrollIntoView({ behavior: 'smooth', block: 'nearest' });
            } catch (error) {
                console.error('Error:', error);
                showError('Failed to load order items: ' + error.message);
            }
        }

        function showError(message) {
            const errorAlert = document.createElement('div');
            errorAlert.className = 'alert alert-danger alert-dismissible fade show';
            errorAlert.innerHTML = `
                <i class="fas fa-exclamation-circle me-2"></i>
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            document.querySelector('.container').insertBefore(errorAlert, document.querySelector('.card'));
        }

        function hideOrderItems() {
            document.getElementById('orderItemsContainer').style.display = 'none';
            if (lastSelectedRow) {
                lastSelectedRow.classList.remove('selected-order');
                lastSelectedRow = null;
            }
        }

        window.onload = function () {
            const pharmacyId = @ViewBag.PharmacyId;
            console.log("Loading orders for Pharmacy ID:", pharmacyId);
            fetchOrdersDetails(pharmacyId.toString());
        };
    </script>
</body>
</html>