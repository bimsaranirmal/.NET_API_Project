@{
    Layout = "~/Views/Shared/_StaffNavigation1.cshtml";
}

<div class="container-fluid px-4">
    <div class="card shadow-lg mt-4">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h2 class="mb-0">Order Management</h2>
        </div>
        <div class="row mb-3">
            <div class="col-md-6">
                <div class="card text-white bg-warning shadow-sm">
                    <div class="card-body d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Pending Orders</h5>
                        <span id="pending-orders-count" class="fs-4 fw-bold">0</span>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card text-white bg-success shadow-sm">
                    <div class="card-body d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Approved Orders</h5>
                        <span id="approved-orders-count" class="fs-4 fw-bold">0</span>
                    </div>
                </div>
            </div>
        </div>



        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover" id="ordersTable">
                    <thead class="table-dark">
                        <tr>
                            <th>Order ID</th>
                            <th>Pharmacy ID</th>
                            <th>Order Date</th>
                            <th>Status</th>
                            <th>Total Amount</th>
                            <th>Items</th>
                            <th class="text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Data will be injected here by JavaScript -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Order Items Modal -->
<div class="modal fade" id="orderItemsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title">Order Items</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <table class="table table-striped" id="orderItemsTable">
                    <thead>
                        <tr>
                            <th>Item ID</th>
                            <th>Drug ID</th>
                            <th>Quantity</th>
                            <th>Unit Price</th>
                            <th>Total</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Data will be injected here by JavaScript -->
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Fetch orders from API and render to the table
        async function fetchOrders() {
            try {
                const response = await fetch('https://localhost:7210/api/order');

                if (!response.ok) {
                    throw new Error('Error fetching orders');
                }

                const orders = await response.json();
                if (!Array.isArray(orders)) {
                    throw new Error('Invalid order data format');
                }

                const ordersTableBody = document.querySelector('#ordersTable tbody');
                ordersTableBody.innerHTML = '';

                let pendingCount = 0;
                let approvedCount = 0;

                orders.forEach(order => {
                    if (order.status === "Pending") pendingCount++;
                    if (order.status === "Approved") approvedCount++;

                    let totalAmount = order.items.reduce((sum, item) => sum + (item.quantity * item.unitPrice), 0);

                    const orderRow = document.createElement('tr');
                    orderRow.innerHTML = `
                    <td>${order.id}</td>
                    <td>${order.pharmacyId}</td>
                    <td>${new Date(order.orderDate).toLocaleDateString()}</td>
                    <td id="status-${order.id}">${order.status}</td>
                    <td>LKR.${totalAmount.toFixed(2)}</td>
                    <td>
                        <button class="btn btn-sm btn-info" onclick="showOrderItems(${order.id})">
                            <i class="fas fa-eye"></i> View
                        </button>
                    </td>
                    <td class="text-center">
                        ${order.status === "Pending" ? `
                            <div class="btn-group" role="group">
                                <button class="btn btn-sm btn-success" onclick="approveOrder(${order.id})">
                                    <i class="fas fa-check"></i> Approve
                                </button>
                                <button class="btn btn-sm btn-danger" onclick="rejectOrder(${order.id})">
                                    <i class="fas fa-times"></i> Reject
                                </button>
                            </div>
                        ` : `<span class="badge bg-secondary">${order.status}</span>`}
                    </td>
                `;

                    ordersTableBody.appendChild(orderRow);
                });

                // Update counts on UI
                document.getElementById('pending-orders-count').textContent = pendingCount;
                document.getElementById('approved-orders-count').textContent = approvedCount;
            } catch (error) {
                showAlert('Failed to load orders: ' + error.message, 'danger');
            }
        }


        // Show order items when 'View Items' button is clicked
        async function showOrderItems(orderId) {
            try {
                const response = await fetch(`https://localhost:7210/api/order/${orderId}`);
                if (!response.ok) {
                    throw new Error('Error fetching order items');
                }

                const order = await response.json();
                const orderItemsTableBody = document.querySelector('#orderItemsTable tbody');
                orderItemsTableBody.innerHTML = '';

                order.items.forEach(item => {
                    const itemRow = document.createElement('tr');
                    const totalItemPrice = item.quantity * item.unitPrice;

                    itemRow.innerHTML = `
                                <td>${item.id}</td>
                                <td>${item.drugId}</td>
                                <td>${item.quantity}</td>
                                <td>LKR.${item.unitPrice.toFixed(2)}</td>
                                <td>LKR.${totalItemPrice.toFixed(2)}</td>
                            `;
                    orderItemsTableBody.appendChild(itemRow);
                });

                // Use Bootstrap modal instead of show/hide
                var orderItemsModal = new bootstrap.Modal(document.getElementById('orderItemsModal'));
                orderItemsModal.show();
            } catch (error) {
                showAlert('Failed to load order items: ' + error.message, 'danger');
            }
        }

        // Approve Order
        async function approveOrder(orderId) {
            if (!confirm("Are you sure you want to approve this order?")) return;

            try {
                const response = await fetch(`https://localhost:7210/api/order/${orderId}/approve`, { method: 'POST' });

                if (!response.ok) {
                    throw new Error(`Failed to approve order. Status: ${response.status}`);
                }

                document.getElementById(`status-${orderId}`).textContent = "Approved";
                showAlert("Order approved successfully.", "success");
                fetchOrders(); // Refresh orders and counts
            } catch (error) {
                showAlert('Failed to approve order: ' + error.message, 'danger');
            }
        }

        async function rejectOrder(orderId) {
            if (!confirm("Are you sure you want to reject this order?")) return;

            try {
                const response = await fetch(`https://localhost:7210/api/order/${orderId}/reject`, { method: 'POST' });

                if (!response.ok) {
                    throw new Error('Error rejecting order');
                }

                document.getElementById(`status-${orderId}`).textContent = "Rejected";
                showAlert("Order rejected successfully.", "success");
                fetchOrders(); // Refresh orders and counts
            } catch (error) {
                showAlert('Failed to reject order: ' + error.message, 'danger');
            }
        }


        // Utility function to show alerts
        function showAlert(message, type = "info") {
            const alertContainer = document.createElement('div');
            alertContainer.className = `alert alert-${type} alert-dismissible fade show position-fixed top-0 end-0 m-3 z-3`;
            alertContainer.setAttribute('role', 'alert');

            alertContainer.innerHTML = `
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    `;

            document.body.appendChild(alertContainer);

            setTimeout(() => {
                const bsAlert = bootstrap.Alert.getOrCreateInstance(alertContainer);
                bsAlert.close();
            }, 3000);
        }

        // Fetch orders on page load
        window.onload = fetchOrders;
    </script>
}