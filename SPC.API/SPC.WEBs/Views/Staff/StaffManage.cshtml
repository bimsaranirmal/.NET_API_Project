@model List<SPC.Web.Models.Staff>
@{
    Layout = "~/Views/Shared/_StaffNavigation1.cshtml";
}

<div class="container-fluid px-4">
    <div class="card shadow-lg mt-4">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h2 class="mb-0">Staff Management</h2>

        </div>
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h5>Total Staff: <span id="staff-count">0</span></h5>
        </div>

        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover" id="staff-table">
                    <thead class="table-dark">
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Role</th>
                            <th class="text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="staff-table-body">
                        <!-- Table rows will be populated here dynamically -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Add Staff Modal -->
<div class="modal fade" id="addStaffModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">Add New Staff Member</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addStaffForm">
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input type="text" class="form-control" id="staffName" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-control" id="staffEmail" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Role</label>
                        <select class="form-select" id="staffRole" required>
                            <option value="">Select Role</option>
                            <option value="Admin">Admin</option>
                            <option value="Manager">Manager</option>
                            <option value="Staff">Staff</option>
                        </select>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-success">Add Staff</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        async function fetchAllStaff() {
            try {
                const response = await fetch("https://localhost:7210/api/staff/all");
                if (response.ok) {
                    const staffList = await response.json();
                    const tableBody = document.getElementById('staff-table-body');
                    const staffCount = document.getElementById('staff-count');

                    tableBody.innerHTML = ''; // Clear previous rows
                    staffCount.textContent = staffList.length; // Update staff count

                    staffList.forEach(staff => {
                        const row = document.createElement('tr');
                        row.id = `staff-${staff.id}`;
                        row.innerHTML = `
                        <td>${staff.id}</td>
                        <td>${staff.name}</td>
                        <td>${staff.email}</td>
                        <td>${staff.role}</td>
                        <td class="text-center">
                            <div class="btn-group" role="group">
                                <button class="btn btn-sm btn-danger" onclick="deleteStaff(${staff.id})">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    `;
                        tableBody.appendChild(row);
                    });
                } else {
                    showAlert("Failed to fetch staff members.", "danger");
                }
            } catch (error) {
                showAlert(`An error occurred: ${error.message}`, "danger");
            }
        }


        async function deleteStaff(staffId) {
            if (confirm("Are you sure you want to delete this staff member?")) {
                try {
                    const response = await fetch(`https://localhost:7210/api/staff/delete/${staffId}`, {
                        method: 'DELETE',
                    });
                    if (response.ok) {
                        document.getElementById(`staff-${staffId}`).remove();
                        fetchAllStaff(); // Refresh the staff list and update count
                        showAlert("Staff member deleted successfully.", "success");
                    } else {
                        showAlert("Failed to delete staff member.", "danger");
                    }
                } catch (error) {
                    showAlert(`An error occurred: ${error.message}`, "danger");
                }
            }
        }


        // Function to open add staff modal
        function openAddStaffModal() {
            const modal = new bootstrap.Modal(document.getElementById('addStaffModal'));
            modal.show();
        }

        // Function to handle adding new staff
        document.getElementById('addStaffForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const name = document.getElementById('staffName').value;
            const email = document.getElementById('staffEmail').value;
            const role = document.getElementById('staffRole').value;

            try {
                const response = await fetch("https://localhost:7210/api/staff/add", {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ name, email, role })
                });

                if (response.ok) {
                    const newStaff = await response.json();
                    fetchAllStaff(); // Refresh the table
                    bootstrap.Modal.getInstance(document.getElementById('addStaffModal')).hide();
                    showAlert("Staff member added successfully.", "success");
                } else {
                    showAlert("Failed to add staff member.", "danger");
                }
            } catch (error) {
                showAlert(`An error occurred: ${error.message}`, "danger");
            }
        });

        // Utility function to show alerts
        function showAlert(message, type) {
            const alertContainer = document.createElement('div');
            alertContainer.className = `alert alert-${type} alert-dismissible fade show position-fixed top-0 end-0 m-3`;
            alertContainer.setAttribute('role', 'alert');
            alertContainer.innerHTML = `
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    `;
            document.body.appendChild(alertContainer);
            setTimeout(() => {
                const alert = bootstrap.Alert.getInstance(alertContainer);
                if (alert) alert.close();
            }, 3000);
        }

        // Fetch staff when the page loads
        window.onload = fetchAllStaff;
    </script>
}