@model List<SPC.Web.Models.SupplierDrugOrder>

@{
    Layout = "~/Views/Shared/_StaffNavigation1.cshtml";
}

<h2 class="mt-3">@ViewData["Title"]</h2>

<!-- Search Box -->
<!-- Orders Table -->
<div class="table-responsive">
    <table class="table table-striped table-hover" id="orderTable">
        <thead class="table-dark">
            <tr>
                <th>Order ID</th>
                <th>Supplier ID</th>
                <th>Drug ID</th>
                <th>Quantity</th>
                <th>Total Price</th>
                <th>Order Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <!-- Orders will be loaded dynamically -->
        </tbody>
    </table>
</div>


<!-- Order Details Modal -->
<div id="orderModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Order Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="orderDetails">
                <!-- Order details will be loaded here -->
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/js/all.min.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            loadOrders();
        });

        function loadOrders() {
            fetch("https://localhost:7210/api/SupplierDrugOrder/AllOrders")

                .then(response => response.json())
                .then(orders => {
                    const tableBody = document.querySelector("#orderTable tbody");
                    tableBody.innerHTML = "";

                    if (orders.length > 0) {
                        orders.forEach(async order => {
                            let drugName = await getDrugName(order.drugId);
                            const row = document.createElement("tr");
                            row.innerHTML = `
                                        <td>${order.orderId}</td>
                                        <td>${order.supplierId}</td>
                                        <td>${order.drugId}</td>
                                        <td>${order.quantity}</td>
                                        <td>${order.totalPrice.toFixed(2)}</td>
                                        <td>${new Date(order.orderDate).toLocaleDateString()}</td>
                                        <td>

                                            <button class="btn btn-danger btn-sm" onclick="deleteOrder(${order.orderId})"><i class="fas fa-trash"></i> Delete</button>
                                        </td>
                                    `;
                            tableBody.appendChild(row);
                        });
                    } else {
                        tableBody.innerHTML = '<tr><td colspan="7" class="text-center text-danger">No orders found.</td></tr>';
                    }
                })
                .catch(error => console.error("Error loading orders:", error));
        }

        function getDrugName(drugId) {
            return fetch(`/api/Drug/${drugId}`)
                .then(response => response.json())
                .then(data => data.drugName)
                .catch(() => "Unknown Drug");
        }

        function viewOrder(orderId) {
            fetch(`/api/SupplierDrugOrder/${orderId}`)
                .then(response => response.json())
                .then(async order => {
                    let drugName = await getDrugName(order.drugId);
                    document.getElementById("orderDetails").innerHTML = `
                                <p><strong>Order ID:</strong> ${order.orderId}</p>
                                <p><strong>Supplier ID:</strong> ${order.supplierId}</p>
                                <p><strong>Quantity:</strong> ${order.quantity}</p>
                                <p><strong>Total Price:</strong> ${order.totalPrice.toFixed(2)}</p>
                                <p><strong>Order Date:</strong> ${new Date(order.orderDate).toLocaleDateString()}</p>
                            `;
                    var modal = new bootstrap.Modal(document.getElementById('orderModal'));
                    modal.show();
                })
                .catch(() => alert("Error retrieving order details."));
        }

        function deleteOrder(orderId) {
            if (confirm('Are you sure you want to delete this order?')) {
                fetch(`/SupplierDrugOrder/DeleteOrder/${orderId}`, { method: "POST" })
                    .then(response => {
                        if (response.ok) {
                            alert("Order deleted successfully.");
                            loadOrders();
                        } else {
                            alert("Error deleting order.");
                        }
                    })
                    .catch(error => console.error("Error deleting order:", error));
            }
        }

        function searchOrders() {
            const searchTerm = document.getElementById("searchTerm").value.trim();

            if (searchTerm === "") {
                loadOrders();
            } else {
                fetch(`https://localhost:7210/api/SupplierDrugOrder/search?searchTerm=${encodeURIComponent(searchTerm)}`)
                    .then(response => response.json())
                    .then(data => {
                        displayAllDrugs(data);
                    })
                    .catch(error => console.error("Error searching orders:", error));
            }
        }
    </script>
}
