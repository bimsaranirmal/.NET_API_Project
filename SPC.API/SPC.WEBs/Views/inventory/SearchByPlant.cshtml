@model List<SPC.Web.Models.Drug>
@{
    Layout = "~/Views/Shared/_StaffNavigation.cshtml";
}

<div class="container mt-4">
    <h2 class="mb-4">Drug Inventory Management</h2>

    <!-- Search Section -->
    <div class="card mb-4">
        <div class="card-header">
            <h4>Search Drugs by Manufacturing Plant</h4>
        </div>
        <div class="card-body">
            @if (!ViewData.ModelState.IsValid)
            {
                @Html.ValidationSummary(false, "", new { @class = "text-danger" })
            }
            @using (Html.BeginForm("SearchByPlant", "Inventory", FormMethod.Post, new { @class = "form-inline" }))
            {
                <div class="form-group mx-sm-3 mb-2">
                    <label for="manufacturingPlantId" class="sr-only">Manufacturing Plant ID:</label>
                    <input type="text" class="form-control" id="manufacturingPlantId" name="manufacturingPlantId"
                           placeholder="Enter Plant ID" required>
                </div>
                <button type="submit" class="btn btn-primary mb-2">Search</button>
                @Html.ActionLink("View All Drugs", "GetAllDrugs", null, new { @class = "btn btn-secondary mb-2 ml-2" })
            }
        </div>
    </div>

    <!-- Add New Drug Button -->
    <div class="mb-4">
        <button class="btn btn-success" onclick="openAddDrugModal()">
            <i class="fas fa-plus"></i> Add New Drug
        </button>
    </div>

    <!-- Drug List Section -->
    @if (Model != null)
    {
        <div class="card">
            <div class="card-header">
                <h4>Drug Inventory</h4>
            </div>
            <div class="card-body">
                @if (!string.IsNullOrEmpty(ViewBag.Message))
                {
                    <div class="alert alert-info">@ViewBag.Message</div>
                }
                @if (Model.Count > 0)
                {
                    <div class="table-responsive">
                        <table class="table table-striped" id="drugTable">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Description</th>
                                    <th>Unit Price</th>
                                    <th>Stock Level</th>
                                    <th>Plant ID</th>
                                    <th>Manufacture Date</th>
                                    <th>Expiry Date</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var drug in Model)
                                {
                                    <tr id="drug-@drug.Id">
                                        <td>@drug.Name</td>
                                        <td>@drug.Description</td>
                                        <td>@drug.UnitPrice.ToString("C")</td>
                                        <td class="stock-level">@drug.StockLevel</td>
                                        <td>@drug.ManufacturingPlantId</td>
                                        <td>@drug.ManufactureDate.ToShortDateString()</td>
                                        <td>@drug.ExpiryDate.ToShortDateString()</td>
                                        <td>
                                            <button class="btn btn-warning btn-sm" onclick="showUpdateStockModal(@drug.Id)">
                                                <i class="fas fa-edit"></i> Update Stock
                                            </button>
                                            <button class="btn btn-danger btn-sm" onclick="deleteDrug(@drug.Id)">
                                                <i class="fas fa-trash"></i> Delete
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else if (ViewBag.Message == null)
                {
                    <div class="alert alert-warning">No drugs found. Please try a different search.</div>
                }
            </div>
        </div>
    }
</div>

<!-- Add Drug Modal -->
<div class="modal fade" id="addDrugModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">Add New Drug</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addDrugForm">
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input type="text" class="form-control" name="Name" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" name="Description" required></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Unit Price</label>
                        <input type="number" step="0.01" class="form-control" name="UnitPrice" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Stock Level</label>
                        <input type="number" class="form-control" name="StockLevel" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Manufacturing Plant ID</label>
                        <input type="text" class="form-control" name="ManufacturingPlantId" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Manufacture Date</label>
                        <input type="date" class="form-control" name="ManufactureDate" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Expiry Date</label>
                        <input type="date" class="form-control" name="ExpiryDate" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" onclick="submitAddDrugForm()">Add Drug</button>
            </div>
        </div>
    </div>
</div>

<!-- Update Stock Modal -->
<div class="modal fade" id="updateStockModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-warning text-white">
                <h5 class="modal-title">Update Stock</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="updateStockForm">
                    <input type="hidden" id="drugId">
                    <div class="mb-3">
                        <label class="form-label">New Quantity</label>
                        <input type="number" class="form-control" id="quantity" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-warning" onclick="submitUpdateStock()">Update Stock</button>
            </div>
        </div>
    </div>
</div>

<!-- Alert Container -->
<div id="alertContainer" class="position-fixed top-0 end-0 p-3" style="z-index: 1050;"></div>

@section Scripts {
    <script>
        // Utility Functions
        function showAlert(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    `;
            document.getElementById('alertContainer').appendChild(alertDiv);
            setTimeout(() => alertDiv.remove(), 3000);
        }

        function openAddDrugModal() {
            const modal = new bootstrap.Modal(document.getElementById('addDrugModal'));
            document.getElementById('addDrugForm').reset();
            modal.show();
        }

        function showUpdateStockModal(drugId) {
            const modal = new bootstrap.Modal(document.getElementById('updateStockModal'));
            document.getElementById('drugId').value = drugId;
            document.getElementById('quantity').value = '';
            modal.show();
        }

        // Add Drug Functions
        async function submitAddDrugForm() {
            const form = document.getElementById('addDrugForm');
            const formData = new FormData(form);
            const drug = Object.fromEntries(formData.entries());

            try {
                const response = await fetch('https://localhost:7210/api/inventory/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(drug)
                });

                if (response.ok) {
                    showAlert('Drug added successfully!', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('addDrugModal')).hide();
                    location.reload();
                } else {
                    const error = await response.json();
                    showAlert(error.message || 'Failed to add drug', 'danger');
                }
            } catch (error) {
                showAlert('Error adding drug: ' + error.message, 'danger');
            }
        }

        // Update Stock Functions
        async function submitUpdateStock() {
            const drugId = document.getElementById('drugId').value;
            const quantity = document.getElementById('quantity').value;

            try {
                const response = await fetch(`https://localhost:7210/api/inventory/stock/${drugId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(quantity)
                });

                if (response.ok) {
                    showAlert('Stock updated successfully!', 'success');
                    const stockCell = document.querySelector(`#drug-${drugId} .stock-level`);
                    if (stockCell) stockCell.textContent = quantity;
                    bootstrap.Modal.getInstance(document.getElementById('updateStockModal')).hide();
                } else {
                    const error = await response.json();
                    showAlert(error.message || 'Failed to update stock', 'danger');
                }
            } catch (error) {
                showAlert('Error updating stock: ' + error.message, 'danger');
            }
        }

        // Delete Drug Function
        async function deleteDrug(drugId) {
            if (!confirm('Are you sure you want to delete this drug?')) return;

            try {
                const response = await fetch(`https://localhost:7210/api/inventory/delete/${drugId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    showAlert('Drug deleted successfully!', 'success');
                    document.getElementById(`drug-${drugId}`).remove();
                } else {
                    const error = await response.json();
                    showAlert(error.message || 'Failed to delete drug', 'danger');
                }
            } catch (error) {
                showAlert('Error deleting drug: ' + error.message, 'danger');
            }
        }

        // Form Validation
        document.getElementById('addDrugForm').addEventListener('submit', function (e) {
            e.preventDefault();
            submitAddDrugForm();
        });

        document.getElementById('updateStockForm').addEventListener('submit', function (e) {
            e.preventDefault();
            submitUpdateStock();
        });
    </script>
}