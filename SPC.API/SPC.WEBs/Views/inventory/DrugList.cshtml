@model List<SPC.Web.Models.Drug>

@{
    Layout = "~/Views/Shared/_StaffNavigation1.cshtml";
}

<div class="container-fluid px-4">
    <div class="card shadow-lg mt-4">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h2 class="mb-0">Drug Inventory Management</h2>
            <button class="btn btn-light" onclick="openAddDrugModal()">➕ Add New Drug</button>
        </div>

        <div class="card-body">
            <div class="mb-3">
                <input type="text" id="searchInput" class="form-control" placeholder="Search drugs..." onkeyup="searchDrugs()">
            </div>

            <div class="table-responsive">
                <table class="table table-striped table-hover" id="drug-table">
                    <thead class="table-dark">
                        <tr>
                            <th>Drug ID</th>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Unit Price</th>
                            <th>Stock Level</th>
                            <th>Manufacture Date</th>
                            <th>Expiry Date</th>
                            <th class="text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="drugTableBody">
                        <!-- Table rows will be populated here dynamically -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Add Drug Modal -->
<div class="modal fade" id="addDrugModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">Add New Drug</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="drugForm">
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input class="form-control" id="Name" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" id="Description" required></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Unit Price</label>
                        <input type="number" step="0.01" class="form-control" id="UnitPrice" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Stock Level</label>
                        <input type="number" class="form-control" id="StockLevel" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Manufacturing Plant ID</label>
                        <input class="form-control" id="ManufacturingPlantId" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Manufacture Date</label>
                        <input type="date" class="form-control" id="ManufactureDate" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Expiry Date</label>
                        <input type="date" class="form-control" id="ExpiryDate" required />
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-success" id="submitBtn">Add Drug</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Update Stock Modal -->
<div class="modal fade" id="updateStockModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-warning text-white">
                <h5 class="modal-title">Update Stock</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="updateStockForm">
                    <div class="mb-3">
                        <label class="form-label">Drug ID</label>
                        <input type="number" class="form-control" id="DrugId" readonly required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Quantity</label>
                        <input type="number" class="form-control" id="Quantity" required />
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-warning" id="updateStockBtn">Update Stock</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        async function fetchDrugs() {
            try {
                const response = await fetch("https://localhost:7210/api/inventory/all");

                if (!response.ok) {
                    throw new Error(`API Error: ${response.status} ${response.statusText}`);
                }

                const drugs = await response.json();
                const drugTableBody = document.getElementById('drugTableBody');
                drugTableBody.innerHTML = ''; // Clear old data

                drugs.forEach(drug => {
                    if (!drug.name || drug.name === "string") return; // Skip invalid data

                    const row = document.createElement('tr');
                    row.id = `drug-${drug.id}`;
                    row.innerHTML = `
                                <td>${drug.id}</td>
                                <td class="drug-name">${drug.name}</td>
                                <td>${drug.description}</td>
                                <td>${drug.unitPrice ? drug.unitPrice.toFixed(2) : "N/A"}</td>
                                <td>${drug.stockLevel}</td>
                                <td>${drug.manufactureDate ? new Date(drug.manufactureDate).toLocaleDateString() : "N/A"}</td>
                                <td>${drug.expiryDate ? new Date(drug.expiryDate).toLocaleDateString() : "N/A"}</td>
                                <td class="text-center">
                                    <div class="btn-group" role="group">
                                        <button class="btn btn-sm btn-warning" onclick="showUpdateStockModal(${drug.id})">
                                            <i class="fas fa-edit"></i> Stock
                                        </button>
                                        <button class="btn btn-sm btn-danger" onclick="deleteDrug(${drug.id})">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            `;
                    drugTableBody.appendChild(row);
                });
            } catch (error) {
                showAlert("Failed to load drug data: " + error.message, "danger");
            }
        }

        function showUpdateStockModal(drugId) {
            var modal = new bootstrap.Modal(document.getElementById('updateStockModal'));
            document.getElementById("DrugId").value = drugId;
            modal.show();
        }

        // Utility function to show alerts (similar to staff management)
        function showAlert(message, type) {
            const alertContainer = document.createElement('div');
            alertContainer.className = `alert alert-${type} alert-dismissible fade show position-fixed top-0 end-0 m-3`;
            alertContainer.setAttribute('role', 'alert');
            alertContainer.innerHTML = `
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    `;
            document.body.appendChild(alertContainer);
            setTimeout(() => {
                const alert = bootstrap.Alert.getInstance(alertContainer);
                if (alert) alert.close();
            }, 3000);
        }

        // Function to handle drug deletion
        async function deleteDrug(drugId) {
            if (confirm("Are you sure you want to delete this drug?")) {
                try {
                    const response = await fetch(`https://localhost:7210/api/inventory/delete/${drugId}`, {
                        method: 'DELETE',
                    });
                    if (response.ok) {
                        document.getElementById(`drug-${drugId}`).remove();
                        showAlert("Drug deleted successfully.", "success");
                    } else {
                        showAlert("Failed to delete drug.", "danger");
                    }
                } catch (error) {
                    showAlert(`An error occurred: ${error.message}`, "danger");
                }
            }
        }

        // Function to open add drug modal
        function openAddDrugModal() {
            const modal = new bootstrap.Modal(document.getElementById('addDrugModal'));
            modal.show();
        }

        // Search function
        function searchDrugs() {
            let input = document.getElementById("searchInput").value.toLowerCase();
            let tableRows = document.getElementById("drugTableBody").getElementsByTagName("tr");

            for (let row of tableRows) {
                let nameColumn = row.getElementsByClassName("drug-name")[0];
                if (nameColumn) {
                    let nameText = nameColumn.textContent.toLowerCase();
                    row.style.display = nameText.includes(input) ? "" : "none";
                }
            }
        }

        // Update stock event listener
        document.getElementById("updateStockBtn").addEventListener("click", async function () {
            var drugId = parseInt(document.getElementById("DrugId").value);
            var quantity = parseInt(document.getElementById("Quantity").value);

            if (isNaN(drugId) || isNaN(quantity)) {
                showAlert("Please enter valid drug ID and quantity.", "danger");
                return;
            }

            try {
                const response = await fetch(`https://localhost:7210/api/inventory/stock/${drugId}`, {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(quantity)
                });

                if (response.ok) {
                    const data = await response.json();
                    showAlert(data.message, "success");
                    fetchDrugs(); // Refresh the table
                    bootstrap.Modal.getInstance(document.getElementById('updateStockModal')).hide();
                } else {
                    const errorData = await response.json();
                    showAlert("Error: " + errorData.message, "danger");
                }
            } catch (error) {
                showAlert("An error occurred: " + error.message, "danger");
            }
        });

        // Add drug event listener
        document.getElementById("drugForm").addEventListener("submit", async function (e) {
            e.preventDefault();
            var drug = {
                Name: document.getElementById("Name").value,
                Description: document.getElementById("Description").value,
                UnitPrice: parseFloat(document.getElementById("UnitPrice").value),
                StockLevel: parseInt(document.getElementById("StockLevel").value),
                ManufacturingPlantId: document.getElementById("ManufacturingPlantId").value,
                ManufactureDate: document.getElementById("ManufactureDate").value,
                ExpiryDate: document.getElementById("ExpiryDate").value
            };

            try {
                const response = await fetch("https://localhost:7210/api/inventory/add", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(drug)
                });

                if (response.ok) {
                    showAlert("Drug added successfully!", "success");
                    this.reset();
                    fetchDrugs(); // Reload data
                    bootstrap.Modal.getInstance(document.getElementById('addDrugModal')).hide();
                } else {
                    const errorData = await response.json();
                    showAlert("Error: " + errorData.message, "danger");
                }
            } catch (error) {
                showAlert("An error occurred: " + error.message, "danger");
            }
        });

        // Fetch drugs when the page loads
        window.onload = fetchDrugs;
    </script>
}